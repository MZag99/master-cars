/* stylelint-disable */
@use "sass:math";

@import "variables/sizes";
@import "variables/zindex";

// Hover

@mixin hover {
    :global(.no-touchevents) &:hover {
        @content;
    }
}

// Breakpoint

@mixin breakpoint($point) {
    @if $point == "phone" { @media (max-width: $size-tablet - 1px) { @content; } }

    @else if $point == "phone-small" { @media (max-width: $size-min) { @content; } }

    @else if $point == "not-phone" { @media (min-width: $size-tablet) { @content; } }

    @else if $point == "tablet" { @media (min-width: $size-tablet) and (max-width: $size-desktop - 1px) { @content; } }

    @else if $point == "desktop" { @media (min-width: $size-desktop) { @content; } }

    @else if $point == "hd" { @media (min-width: $size-hd) { @content; } }

    @else if $point == "not-desktop" { @media (max-width: $size-desktop - 1px) { @content; } }

    @else if $point == "not-hd" { @media (max-width: $size-hd - 1px) { @content; } }

    @else if $point == "laptop" { @media (min-width: $size-desktop) and (max-height: $size-laptop) { @content; } }

    @else if $point == "landscape" { @media (orientation: landscape) { @content; } }

    @else if $point == "touch" { @media (pointer: coarse) { @content; } }

    @else if $point == "not-touch" { @media not all and (pointer: coarse) { @content; } }

    @else if $point == "retina" {
        @media only screen and (-webkit-min-device-pixel-ratio: 2),
            only screen and (resolution >= 192dpi), only screen and (min-width: $size-desktop) { @content; }
    }

    @else if $point == "tablet-landscape" {
        @media only screen and (width >= 768px) and (width <= 1024px) and (orientation: landscape) { @content; }
    }

    @else if $point == "ipad-pro" {
        @media only screen and (width >= 1024px) and (height <= 1366px) and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 1.5) { @content; }
    }
}

// Full

@mixin full($position: absolute, $offset: 0) {
    position: $position;
    inset: strip-units($offset) + px strip-units($offset) + px strip-units($offset) + px strip-units($offset) + px;
}

// Font size

@mixin font-size($size: $browser-context, $line: $line-height) {
    font-size: strip-units($size) + px;
    font-size: math.div(strip-units($size), strip-units($browser-context)) + rem;

    @if (strip-units($line) < 4) {
        line-height: strip-units($line);
    }

    @else {
        line-height: math.div(strip-units($line), strip-units($size));
    }
}

// Font size variable
@mixin font-size-var($size, $map) {
    $size-values: map-get($map, $size);

    @if type-of($size-values) == "null" {
        @error "Font size '#{$size}' not found in #{$map} map.";
    } @else {

        $desktop: nth($size-values, 1);
        $tablet: nth($size-values, 2);
        $phone: nth($size-values, 3);

        $bps: (
            desktop: nth($size-values, 1),
            tablet: nth($size-values, 2),
            phone: nth($size-values, 3)
        );

        @each $bp, $font-size in $bps {

            @include breakpoint($bp) {
                @include font-size(nth($font-size, 1), nth($font-size, 2));
            }

        }
    }
}
// Strip units

@function strip-units($value) {
    @return math.div($value, ($value * 0 + 1));
}

// zindex

@function z($list, $element) {
    $z-index: index($list, $element);

    @if $z-index { @return $z-index; }

    @warn 'There is no item "#{$element}" in this list; choose one of: #{$list}';

    @return null;
}

@mixin z-index($element, $list: $elements) {
    z-index: z($list, $element);
}

// Flex

@mixin flex($direction: row, $justify: center, $align: center, $flex: flex) {
    display: $flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}

// vw

@function vw($size, $bp: desktop, $max: true) {
    $layouts: (
        phone: 375,
        tablet: 768,
        desktop: 1920,
        hd: 1920
    );

    @if map-has-key($layouts, $bp) {
        @return math.div(strip-units($size), map-get($layouts, $bp)) * 100vw;
    }

    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$bp}`.";
    }
}

// vh

@function vh($size, $bp: desktop) {
    $layouts: (
        phone: 375,
        tablet: 768,
        desktop: 1440,
        hd: 1600
    );

    @if map-has-key($layouts, $bp) {
        @return math.div(strip-units($size), map-get($layouts, $bp)) * 100vh;
    }

    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$bp}`.";
    }
}
/* stylelint-enable */
